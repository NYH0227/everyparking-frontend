import React, { useEffect, useState } from "react";import ParkingService from "../service/ParkingService";import { MDBAccordion, MDBAccordionItem, MDBTable, MDBTableBody, MDBTableHead } from "mdb-react-ui-kit";import { CButton, CFormInput, CInputGroup } from "@coreui/react";import DatePicker from "react-datepicker";const { kakao } = window;const Borrow = () => {  const [myCars, setMyCars] = useState([]);  const [carId, setCarId] = useState()  const [startTime, setStartTime] = useState(new Date())  const [myMapX, setMyMapX] = useState("126.753432165028")  const [myMapY, setMyMapY] = useState("37.4788363460667")  const [input, setInput] = useState()  const [text, setText] = useState()  useEffect(()=>{    ParkingService.getMyCar()      .then((res) => {        setMyCars(res.data.data);        console.log(res.data)      })    if (navigator.geolocation) {      navigator.geolocation.getCurrentPosition(function(position) {        setMyMapY(position.coords.latitude)        setMyMapX(position.coords.longitude)        var mapContainer = document.getElementById("selectMap")        var mapOption = {          center: new kakao.maps.LatLng(myMapY, myMapX),          level: 4 // 지도의 확대 레벨        };        var map = new kakao.maps.Map(mapContainer, mapOption);        var coords = new kakao.maps.LatLng(position.coords.latitude, position.coords.longitude);        var marker = new kakao.maps.Marker({          map: map,          position: coords        });        new kakao.maps.InfoWindow({          map: map,          position : coords,          content : '<div style="padding:5px;">현재 위치</div>',        });        map.setCenter(coords, marker);      })}  },[])  useEffect(() => {    var mapContainer = document.getElementById("selectMap"),      mapOption = {        center: new kakao.maps.LatLng(myMapY, myMapX),        level: 4      };    var map = new kakao.maps.Map(mapContainer, mapOption);    var geocoder = new kakao.maps.services.Geocoder();    geocoder.addressSearch(input, function(result, status) {      if (status === kakao.maps.services.Status.OK) {        var coords = new kakao.maps.LatLng(result[0].y, result[0].x);        setMyMapY(result[0].y)        setMyMapX(result[0].x)        var callback = function(result, status) {          if (status === kakao.maps.services.Status.OK) {            console.log("주소는", result[0].address.address_name);          }        };        geocoder.coord2Address(coords.getLng(), coords.getLat(), callback);        var marker = new kakao.maps.Marker({          map: map,          position: coords        });        new kakao.maps.InfoWindow({          map: map,          position : coords,          content : '<div style="padding:5px;">검색 위치</div>',        });        map.setCenter(coords, marker);      }    });  }, [input]);  return (    <div>      <MDBAccordion flush initialActive={0}>        <MDBAccordionItem collapseId={1} headerTitle="조건 선택">          <MDBTable align="middle">            <MDBTableHead>              <tr>                <th scope="col">내 차 모델</th>                <th scope="col">차 번호</th>                <th scope="col">차 종</th>                <th scope="col">Actions</th>              </tr>            </MDBTableHead>            <MDBTableBody>              {myCars &&                myCars.map((item, idx) =>                  <tr key={item.idx} id={item.idx}>                    <td>                      <p className="fw-normal mb-1">{item.carModel}</p>                    </td>                    <td>                      <p className="fw-normal mb-1">{item.carNumber}</p>                    </td>                    <td>                      <p className="fw-normal mb-1">{item.carSize}</p>                    </td>                    <td>                      {idx == carId ?                        <CButton color="info" value={idx} onClick={(e) => setCarId(e.target.value)}>선택중</CButton>                        :                        <CButton color="success" value={idx}                                 onClick={(e) => {                                   setCarId(e.target.value);                                 }}>선택</CButton>                      }                    </td>                  </tr>)}            </MDBTableBody>          </MDBTable>          <div className="mb-4">            <DatePicker              selected={startTime}              onChange={(date) => setStartTime(date)}              locale="pt-BR"              showTimeSelect              timeFormat="p"              timeIntervals={60}              dateFormat="MM월 dd일 h:mm aa"            />          </div>          <CInputGroup className="mb-3">            <CButton type="button" color="dark" onClick={() => setInput(text)} variant="outline"                     id="button-addon1">주소검색</CButton>            <CFormInput placeholder="무네미로 448번길" value={text} onChange={(e) => setText(e.target.value)}                        aria-label="Example text with button addon" aria-describedby="button-addon1" />          </CInputGroup>        </MDBAccordionItem>        <MDBAccordionItem collapseId={2} headerTitle="검색 결과">          <div>            <div id="selectMap" style={{              width: "100%",              height: "300px",              margin: "auto"            }}></div>          </div>        </MDBAccordionItem>      </MDBAccordion>    </div>  );}export default Borrow;