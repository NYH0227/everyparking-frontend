import React, { useEffect, useState } from "react";import ParkingService from "../service/ParkingService";import { MDBAccordion, MDBAccordionItem, MDBTable, MDBTableBody, MDBTableHead,  } from "mdb-react-ui-kit";import {  CButton,  CFormInput,  CInputGroup, CTable, CTableBody, CTableDataCell, CTableHead, CTableHeaderCell, CTableRow} from "@coreui/react";import DatePicker from "react-datepicker";import Swal from "sweetalert2";import CIcon from "@coreui/icons-react";import { cilSearch } from "@coreui/icons";const { kakao } = window;const Borrow = () => {  const [myCars, setMyCars] = useState([]);  const [carId, setCarId] = useState()  const [carNumber, setCarNumber] = useState()  const [startTime, setStartTime] = useState(new Date())  const [endTime, setEndTime] = useState(new Date())  const [myMapX, setMyMapX] = useState()  const [myMapY, setMyMapY] = useState()  const [input, setInput] = useState()  const [text, setText] = useState()  const [positions, setPositions] = useState([])  useEffect(()=>{    ParkingService.getMyCar()      .then((res) => {        setMyCars(res.data.data);        console.log(res.data)      })      .catch((err) => {console.log(err)})  },[])  useEffect(() => {    const infowindow = new kakao.maps.InfoWindow({zIndex:1, removable: true} );    var mapContainer = document.getElementById("selectMap");    var mapOption = {        center: new kakao.maps.LatLng(37.4788363460667, 126.753432165028),        level: 4      };    var map = new kakao.maps.Map(mapContainer, mapOption);    var zoomControl = new kakao.maps.ZoomControl();    map.addControl(zoomControl, kakao.maps.ControlPosition);    var geocoder = new kakao.maps.services.Geocoder();    geocoder.addressSearch(input, function(result, status) {      if (status === kakao.maps.services.Status.OK) {        var coords = new kakao.maps.LatLng(result[0].y, result[0].x);        setMyMapY(result[0].y)        setMyMapX(result[0].x)        var callback = function(result, status) {          if (status === kakao.maps.services.Status.OK) {            console.log("주소는", result[0].address.address_name);          }        };        geocoder.coord2Address(coords.getLng(), coords.getLat(), callback);        var marker = new kakao.maps.Marker({          map: map,          position: coords,        });        var infowindow = new kakao.maps.InfoWindow({          map: map,          position : coords,          content : '<div style="padding:5px;">검색 위치</div>',        });        infowindow.open(map, marker);        map.setCenter(coords, marker);      }    });    for (var i = 0; i < positions.length; i ++) {      displayMarker(positions[i])    }    // 마커에 클릭이벤트(마커에 인포 생성)를 등록    function displayMarker(place) {      const marker = new kakao.maps.Marker({        map: map,        position: new kakao.maps.LatLng(place.place.mapY, place.place.mapX),      });      kakao.maps.event.addListener(marker, 'click', function() {        infowindow.setContent(          '<div style="font-size:12px;">이름 : ' + place.place.name +          '<br>주소 : '+ place.place.addr +          '<br>비용 : '+ place.cost +          '<br>시작시간 : '+place.start[1] + "월" + +place.start[2] + "일" +place.start[3] + "시부터" +          '</div>' +          '<a href="#" style="font-size:12px;">대여하기</a>'        );        infowindow.open(map, marker);      });    }  }, [input,positions]);  const gotoMap = (mapX, mxpY) => {    var mapContainer = document.getElementById("selectMap"),      mapOption = {        center: new kakao.maps.LatLng(mxpY, mapX),        level: 4      };    var map = new kakao.maps.Map(mapContainer, mapOption);    map.setCenter(new kakao.maps.LatLng(mxpY, mapX));  }    // test  const testFunc = () => {    ParkingService.getBorrowData(carNumber,myMapX,myMapY,startTime.toISOString(),endTime.toISOString())      .then((res) => {        console.log(res.data.data);        setPositions(res.data.data)        //Swal.fire(res.data.message, "", "success");      })      .catch((err) => {        console.log("err", err.response.data);        Swal.fire(err.response.data.errorList[0].message, "", "error");      });  }  return (    <div>      <MDBAccordion flush initialActive={0}>        <MDBAccordionItem collapseId={1} headerTitle="조건 선택">          <MDBTable align="middle" className="mb-5">            <MDBTableHead>              <tr>                <th scope="col">내 차 모델</th>                <th scope="col">차 번호</th>                <th scope="col">차 종</th>                <th scope="col">Actions</th>              </tr>            </MDBTableHead>            <MDBTableBody>              {myCars &&                myCars.map((item, idx) =>                  <tr key={item.idx} id={item.idx}>                    <td>                      <p className="fw-normal mb-1">{item.carModel}</p>                    </td>                    <td>                      <p id="carN" className="fw-normal mb-1">{item.carNumber}</p>                    </td>                    <td>                      <p className="fw-normal mb-1">{item.carSize}</p>                    </td>                    <td>                      {idx == carId ?                        <CButton color="info" value={idx} onClick={(e) => setCarId(e.target.value)}>선택중</CButton>                        :                        <CButton color="success" value={idx}                                 onClick={(e) => {                                   setCarId(e.target.value);                                   setCarNumber(item.carNumber);                                 }}>선택</CButton>                      }                    </td>                  </tr>)}            </MDBTableBody>          </MDBTable>          <div className="mb-5">            <tr>              <th scope="col">시작시간</th>              <th scope="col">종료시간</th>            </tr>            <tr>              <td>                <DatePicker                  selected={startTime}                  onChange={(date) => setStartTime(date)}                  locale="pt-BR"                  showTimeSelect                  timeFormat="p"                  timeIntervals={60}                  dateFormat="MM월 dd일 h aa"                />              </td>              <td>                <DatePicker                  selected={endTime}                  onChange={(date) => setEndTime(date)}                  locale="pt-BR"                  showTimeSelect                  timeFormat="p"                  timeIntervals={60}                  dateFormat="MM월 dd일 h aa"                />              </td>            </tr>          </div>          <CInputGroup className="mb-5">            <CButton type="button" color="dark" onClick={() => {              setInput(text);            }} variant="outline"                     id="button-addon1">주변검색</CButton>            <CFormInput placeholder="무네미로 448번길" value={text} onChange={(e) => setText(e.target.value)}                        aria-label="Example text with button addon" aria-describedby="button-addon1" />          </CInputGroup>          <CButton onClick={testFunc}>검색</CButton>        </MDBAccordionItem>        <MDBAccordionItem collapseId={2} headerTitle="검색 결과">              <div className="col-md-8" id="selectMap" style={{                width: "100%",                height: "300px",                margin: "auto"              }}></div>              <CTable align="middle" className="mb-0 border" hover responsive style={{ overflow: "scroll" }}>                <CTableHead color="light">                  <CTableRow>                    <CTableHeaderCell className="text-center">                    </CTableHeaderCell>                    <CTableHeaderCell>장소</CTableHeaderCell>                    <CTableHeaderCell className="text-center">주소</CTableHeaderCell>                    <CTableHeaderCell>시간</CTableHeaderCell>                    <CTableHeaderCell>거리</CTableHeaderCell>                  </CTableRow>                </CTableHead>                <CTableBody>                  {positions.map((x, index) => (                    <CTableRow key={index} style={{ width: "10rem" }}>                      <CTableDataCell>                        <CButton color="light" onClick={() => {                          gotoMap(x.place.mapX, x.place.mapY)                          console.log(x.placeName);                        }}><CIcon icon={cilSearch} /></CButton>                      </CTableDataCell>                      <CTableDataCell className="text-center">                        {x.place.name}                      </CTableDataCell>                      <CTableDataCell className="text-center" style={{ fontSize: "9px" }}>                        {x.place.addr}                      </CTableDataCell>                      <CTableDataCell style={{ fontSize: "8px" }}>                        {x.start.slice(0,4)} ~ {x.end.slice(0,4)}                      </CTableDataCell>                      <CTableDataCell className="text-center">                        {x.distance}m                      </CTableDataCell>                    </CTableRow>                  ))}                </CTableBody>              </CTable>        </MDBAccordionItem>      </MDBAccordion>    </div>  );}export default Borrow;